Search.setIndex({"docnames": ["api", "contributing", "index", "intro", "reference/api/_autosummary/cycquery.base", "reference/api/_autosummary/cycquery.base.DatasetQuerier", "reference/api/_autosummary/cycquery.eicu", "reference/api/_autosummary/cycquery.eicu.EICUQuerier", "reference/api/_autosummary/cycquery.gemini", "reference/api/_autosummary/cycquery.gemini.GEMINIQuerier", "reference/api/_autosummary/cycquery.interface", "reference/api/_autosummary/cycquery.interface.QueryInterface", "reference/api/_autosummary/cycquery.mimiciii", "reference/api/_autosummary/cycquery.mimiciii.MIMICIIIQuerier", "reference/api/_autosummary/cycquery.mimiciv", "reference/api/_autosummary/cycquery.mimiciv.MIMICIVQuerier", "reference/api/_autosummary/cycquery.omop", "reference/api/_autosummary/cycquery.omop.OMOPQuerier", "reference/api/_autosummary/cycquery.ops", "reference/api/_autosummary/cycquery.ops.AddColumn", "reference/api/_autosummary/cycquery.ops.AddDeltaColumn", "reference/api/_autosummary/cycquery.ops.AddDeltaConstant", "reference/api/_autosummary/cycquery.ops.AddNumeric", "reference/api/_autosummary/cycquery.ops.And", "reference/api/_autosummary/cycquery.ops.Apply", "reference/api/_autosummary/cycquery.ops.Cast", "reference/api/_autosummary/cycquery.ops.ConditionAfterDate", "reference/api/_autosummary/cycquery.ops.ConditionBeforeDate", "reference/api/_autosummary/cycquery.ops.ConditionEndsWith", "reference/api/_autosummary/cycquery.ops.ConditionEquals", "reference/api/_autosummary/cycquery.ops.ConditionGreaterThan", "reference/api/_autosummary/cycquery.ops.ConditionIn", "reference/api/_autosummary/cycquery.ops.ConditionInMonths", "reference/api/_autosummary/cycquery.ops.ConditionInYears", "reference/api/_autosummary/cycquery.ops.ConditionLessThan", "reference/api/_autosummary/cycquery.ops.ConditionLike", "reference/api/_autosummary/cycquery.ops.ConditionRegexMatch", "reference/api/_autosummary/cycquery.ops.ConditionStartsWith", "reference/api/_autosummary/cycquery.ops.ConditionSubstring", "reference/api/_autosummary/cycquery.ops.Count", "reference/api/_autosummary/cycquery.ops.Distinct", "reference/api/_autosummary/cycquery.ops.Drop", "reference/api/_autosummary/cycquery.ops.DropEmpty", "reference/api/_autosummary/cycquery.ops.DropNulls", "reference/api/_autosummary/cycquery.ops.ExtractTimestampComponent", "reference/api/_autosummary/cycquery.ops.FillNull", "reference/api/_autosummary/cycquery.ops.GroupByAggregate", "reference/api/_autosummary/cycquery.ops.Join", "reference/api/_autosummary/cycquery.ops.Keep", "reference/api/_autosummary/cycquery.ops.Limit", "reference/api/_autosummary/cycquery.ops.Literal", "reference/api/_autosummary/cycquery.ops.Or", "reference/api/_autosummary/cycquery.ops.OrderBy", "reference/api/_autosummary/cycquery.ops.QueryOp", "reference/api/_autosummary/cycquery.ops.RandomizeOrder", "reference/api/_autosummary/cycquery.ops.Rename", "reference/api/_autosummary/cycquery.ops.Reorder", "reference/api/_autosummary/cycquery.ops.ReorderAfter", "reference/api/_autosummary/cycquery.ops.Sequential", "reference/api/_autosummary/cycquery.ops.Substring", "reference/api/_autosummary/cycquery.ops.Trim", "reference/api/_autosummary/cycquery.ops.Union", "reference/api/cycquery", "tutorials", "tutorials/eicu", "tutorials/gemini", "tutorials/mimiciii", "tutorials/mimiciv", "tutorials/omop"], "filenames": ["api.rst", "contributing.rst", "index.rst", "intro.rst", "reference/api/_autosummary/cycquery.base.rst", "reference/api/_autosummary/cycquery.base.DatasetQuerier.rst", "reference/api/_autosummary/cycquery.eicu.rst", "reference/api/_autosummary/cycquery.eicu.EICUQuerier.rst", "reference/api/_autosummary/cycquery.gemini.rst", "reference/api/_autosummary/cycquery.gemini.GEMINIQuerier.rst", "reference/api/_autosummary/cycquery.interface.rst", "reference/api/_autosummary/cycquery.interface.QueryInterface.rst", "reference/api/_autosummary/cycquery.mimiciii.rst", "reference/api/_autosummary/cycquery.mimiciii.MIMICIIIQuerier.rst", "reference/api/_autosummary/cycquery.mimiciv.rst", "reference/api/_autosummary/cycquery.mimiciv.MIMICIVQuerier.rst", "reference/api/_autosummary/cycquery.omop.rst", "reference/api/_autosummary/cycquery.omop.OMOPQuerier.rst", "reference/api/_autosummary/cycquery.ops.rst", "reference/api/_autosummary/cycquery.ops.AddColumn.rst", "reference/api/_autosummary/cycquery.ops.AddDeltaColumn.rst", "reference/api/_autosummary/cycquery.ops.AddDeltaConstant.rst", "reference/api/_autosummary/cycquery.ops.AddNumeric.rst", "reference/api/_autosummary/cycquery.ops.And.rst", "reference/api/_autosummary/cycquery.ops.Apply.rst", "reference/api/_autosummary/cycquery.ops.Cast.rst", "reference/api/_autosummary/cycquery.ops.ConditionAfterDate.rst", "reference/api/_autosummary/cycquery.ops.ConditionBeforeDate.rst", "reference/api/_autosummary/cycquery.ops.ConditionEndsWith.rst", "reference/api/_autosummary/cycquery.ops.ConditionEquals.rst", "reference/api/_autosummary/cycquery.ops.ConditionGreaterThan.rst", "reference/api/_autosummary/cycquery.ops.ConditionIn.rst", "reference/api/_autosummary/cycquery.ops.ConditionInMonths.rst", "reference/api/_autosummary/cycquery.ops.ConditionInYears.rst", "reference/api/_autosummary/cycquery.ops.ConditionLessThan.rst", "reference/api/_autosummary/cycquery.ops.ConditionLike.rst", "reference/api/_autosummary/cycquery.ops.ConditionRegexMatch.rst", "reference/api/_autosummary/cycquery.ops.ConditionStartsWith.rst", "reference/api/_autosummary/cycquery.ops.ConditionSubstring.rst", "reference/api/_autosummary/cycquery.ops.Count.rst", "reference/api/_autosummary/cycquery.ops.Distinct.rst", "reference/api/_autosummary/cycquery.ops.Drop.rst", "reference/api/_autosummary/cycquery.ops.DropEmpty.rst", "reference/api/_autosummary/cycquery.ops.DropNulls.rst", "reference/api/_autosummary/cycquery.ops.ExtractTimestampComponent.rst", "reference/api/_autosummary/cycquery.ops.FillNull.rst", "reference/api/_autosummary/cycquery.ops.GroupByAggregate.rst", "reference/api/_autosummary/cycquery.ops.Join.rst", "reference/api/_autosummary/cycquery.ops.Keep.rst", "reference/api/_autosummary/cycquery.ops.Limit.rst", "reference/api/_autosummary/cycquery.ops.Literal.rst", "reference/api/_autosummary/cycquery.ops.Or.rst", "reference/api/_autosummary/cycquery.ops.OrderBy.rst", "reference/api/_autosummary/cycquery.ops.QueryOp.rst", "reference/api/_autosummary/cycquery.ops.RandomizeOrder.rst", "reference/api/_autosummary/cycquery.ops.Rename.rst", "reference/api/_autosummary/cycquery.ops.Reorder.rst", "reference/api/_autosummary/cycquery.ops.ReorderAfter.rst", "reference/api/_autosummary/cycquery.ops.Sequential.rst", "reference/api/_autosummary/cycquery.ops.Substring.rst", "reference/api/_autosummary/cycquery.ops.Trim.rst", "reference/api/_autosummary/cycquery.ops.Union.rst", "reference/api/cycquery.rst", "tutorials.rst", "tutorials/eicu.ipynb", "tutorials/gemini.ipynb", "tutorials/mimiciii.ipynb", "tutorials/mimiciv.ipynb", "tutorials/omop.ipynb"], "titles": ["API Reference", "Contributing to cyclops-query", "Welcome to cyclops-query\u2019s documentation!", "cyclops-query", "cycquery.base", "cycquery.base.DatasetQuerier", "cycquery.eicu", "cycquery.eicu.EICUQuerier", "cycquery.gemini", "cycquery.gemini.GEMINIQuerier", "cycquery.interface", "cycquery.interface.QueryInterface", "cycquery.mimiciii", "cycquery.mimiciii.MIMICIIIQuerier", "cycquery.mimiciv", "cycquery.mimiciv.MIMICIVQuerier", "cycquery.omop", "cycquery.omop.OMOPQuerier", "cycquery.ops", "cycquery.ops.AddColumn", "cycquery.ops.AddDeltaColumn", "cycquery.ops.AddDeltaConstant", "cycquery.ops.AddNumeric", "cycquery.ops.And", "cycquery.ops.Apply", "cycquery.ops.Cast", "cycquery.ops.ConditionAfterDate", "cycquery.ops.ConditionBeforeDate", "cycquery.ops.ConditionEndsWith", "cycquery.ops.ConditionEquals", "cycquery.ops.ConditionGreaterThan", "cycquery.ops.ConditionIn", "cycquery.ops.ConditionInMonths", "cycquery.ops.ConditionInYears", "cycquery.ops.ConditionLessThan", "cycquery.ops.ConditionLike", "cycquery.ops.ConditionRegexMatch", "cycquery.ops.ConditionStartsWith", "cycquery.ops.ConditionSubstring", "cycquery.ops.Count", "cycquery.ops.Distinct", "cycquery.ops.Drop", "cycquery.ops.DropEmpty", "cycquery.ops.DropNulls", "cycquery.ops.ExtractTimestampComponent", "cycquery.ops.FillNull", "cycquery.ops.GroupByAggregate", "cycquery.ops.Join", "cycquery.ops.Keep", "cycquery.ops.Limit", "cycquery.ops.Literal", "cycquery.ops.Or", "cycquery.ops.OrderBy", "cycquery.ops.QueryOp", "cycquery.ops.RandomizeOrder", "cycquery.ops.Rename", "cycquery.ops.Reorder", "cycquery.ops.ReorderAfter", "cycquery.ops.Sequential", "cycquery.ops.Substring", "cycquery.ops.Trim", "cycquery.ops.Union", "cycquery", "Tutorials", "eICU-CRD tutorial", "GEMINI tutorial", "MIMIC-III tutorial", "MIMIC-IV tutorial", "OMOP tutorial"], "terms": {"cycqueri": [0, 2, 3, 64, 65, 66, 67, 68], "interfac": [0, 9, 13, 15, 17], "queryinterfac": [0, 9, 13, 15, 17], "__init__": [0, 11, 58], "clear_data": [0, 11], "data": [0, 3, 9, 11, 13, 15, 54, 67, 68], "join": [0, 3, 11, 15, 64, 65, 66, 67, 68], "op": [0, 3, 11, 15, 63, 64, 65, 66, 68], "run": [0, 1, 3, 5, 11, 63, 64, 65, 66, 68], "save": [0, 11], "union": [0, 11, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60], "union_al": [0, 11, 61], "addcolumn": 0, "__call__": [0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "adddeltacolumn": [0, 67], "adddeltaconst": 0, "addnumer": 0, "And": [0, 67], "appli": [0, 1, 15, 19, 20, 21, 22, 60], "cast": [0, 5, 7, 9, 11, 13, 15, 17, 65, 67], "conditionafterd": [0, 65, 67, 68], "conditionbefored": [0, 65], "conditionendswith": 0, "conditionequ": [0, 64, 65, 66, 67], "conditiongreaterthan": 0, "conditionin": [0, 3, 23, 51], "conditioninmonth": 0, "conditioninyear": [0, 67], "conditionlessthan": [0, 66], "conditionlik": [0, 23, 51, 67], "conditionregexmatch": [0, 63], "conditionstartswith": 0, "conditionsubstr": [0, 3, 64, 65, 66, 67, 68], "count": [0, 46, 65, 68], "distinct": [0, 3, 65], "drop": [0, 58], "dropempti": [0, 65], "dropnul": [0, 3], "extracttimestampcompon": 0, "fillnul": 0, "groupbyaggreg": [0, 65], "keep": [0, 47, 63], "limit": [0, 11, 54, 63, 66, 67, 68], "liter": [0, 11], "Or": 0, "orderbi": [0, 65], "queryop": [0, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61], "randomizeord": 0, "renam": 0, "reorder": [0, 57], "reorderaft": 0, "sequenti": [0, 3, 11, 64, 65, 66, 67, 68], "__add__": [0, 58], "append": [0, 58], "extend": [0, 58], "insert": [0, 58], "pop": [0, 58], "substr": [0, 3, 38, 63], "trim": 0, "base": [0, 3, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "datasetqueri": [0, 3, 7, 9, 13, 15, 17], "db": [0, 5, 65, 67], "get_tabl": [0, 5, 7, 9, 13, 15, 17], "list_column": [0, 5, 7, 9, 13, 15, 17], "list_custom_t": [0, 5, 7, 9, 13, 15, 17, 66], "list_schema": [0, 5, 7, 9, 13, 15, 17, 67, 68], "list_tabl": [0, 3, 5, 7, 9, 13, 15, 17, 64, 65, 68], "dataset": [0, 5, 7, 9, 11, 13, 15, 17, 63], "mimiciii": [0, 66, 68], "mimiciiiqueri": [0, 63, 68], "chartev": [0, 13, 15, 66, 67], "diagnos": [0, 9, 13, 63], "labev": [0, 13, 15, 66], "mimiciv": [0, 67], "mimicivqueri": [0, 63], "diagnoses_icd": [0, 15, 67], "patient": [0, 9, 15, 63], "procedures_icd": [0, 15], "eicu": [0, 2, 63], "eicuqueri": [0, 63], "omop": [0, 2, 63], "omopqueri": [0, 63], "map_concept_ids_to_nam": [0, 17, 68], "measur": [0, 17, 63], "observ": [0, 17, 68], "person": [0, 17, 68], "visit_detail": [0, 17, 68], "visit_occurr": [0, 17, 68], "gemini": [0, 2, 63], "geminiqueri": [0, 63], "care_unit": [0, 9], "imag": [0, 9], "ip_admin": [0, 9], "room_transf": [0, 9], "thank": 1, "your": 1, "interest": 1, "tool": [1, 3, 63, 64, 65, 66, 67, 68], "To": 1, "submit": 1, "pr": 1, "pleas": 1, "fill": [1, 45], "out": 1, "templat": 1, "along": 1, "If": [1, 17, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 52, 60], "fix": 1, "an": [1, 9, 11, 13, 15, 17, 20, 23, 47, 51, 55], "issu": 1, "don": 1, "t": 1, "forget": 1, "link": 1, "onc": 1, "python": [1, 3, 63], "virtual": 1, "environ": [1, 3], "i": [1, 3, 5, 11, 15, 17, 19, 20, 21, 22, 24, 38, 42, 43, 47, 54, 63, 64, 66, 67, 68], "setup": [1, 64, 65, 66, 67, 68], "you": [1, 3, 63], "can": [1, 3, 5, 7, 9, 13, 15, 17, 24, 38], "us": [1, 2, 5, 7, 9, 11, 13, 15, 17, 20, 23, 40, 46, 47, 51, 54, 61, 63, 64, 65, 66, 68], "all": [1, 3, 11, 38, 52, 55, 61, 63, 65], "file": [1, 5, 11], "For": [1, 17], "style": [1, 47], "we": [1, 68], "recommend": 1, "googl": 1, "guid": 1, "black": 1, "format": [1, 11, 26, 27, 47, 68], "docstr": 1, "numpi": 1, "ruff": 1, "further": 1, "static": 1, "analysi": 1, "The": [1, 3, 5, 11, 15, 20, 24, 48, 62, 63, 64, 66, 67, 68], "show": [1, 64, 65, 66, 67, 68], "error": 1, "which": [1, 5, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 68], "need": [1, 59], "befor": [1, 27, 47], "last": 1, "least": 1, "type": [1, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "hint": 1, "our": 1, "check": [1, 55], "mypi": 1, "get": [2, 5, 7, 9, 11, 13, 15, 17, 40, 59, 63], "start": [2, 37, 59], "instal": 2, "pip": 2, "postgresql": [2, 5, 17, 63, 64, 66, 67, 68], "databas": [2, 5, 7, 9, 10, 11, 13, 15, 17, 62, 63, 64, 65, 66, 67, 68], "develop": 2, "poetri": 2, "contribut": 2, "citat": 2, "pre": 2, "commit": 2, "hook": 2, "code": [2, 64, 66, 67, 68], "guidelin": [2, 3], "tutori": 2, "mimic": [2, 12, 13, 14, 15, 63, 68], "iii": [2, 12, 13, 63, 68], "iv": [2, 14, 63], "crd": [2, 6, 63], "api": [2, 3, 5, 7, 9, 13, 15, 16, 17, 63], "refer": [2, 3], "relat": 3, "simpl": 3, "It": [3, 24, 63], "specif": 3, "electron": 3, "health": 3, "record": [3, 63], "ehr": [3, 5, 62, 63, 68], "wrapper": [3, 63], "around": [3, 63], "sqlalchemi": [3, 5, 7, 9, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63], "write": 3, "sql": [3, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 63], "like": [3, 17, 35], "includ": [3, 30, 34], "condit": [3, 11, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 51, 68], "groupbi": 3, "aggreg": [3, 46], "mani": [3, 63], "more": 3, "python3": 3, "m": [3, 66], "from": [3, 9, 11, 15, 17, 44, 47, 55, 60, 63, 64, 66, 68], "import": [3, 63], "qo": [3, 64, 65, 66, 67, 68], "querier": [3, 4, 7, 9, 13, 15, 17, 64, 65, 66, 67, 68], "dbm": [3, 5, 7, 9, 13, 15, 17, 64, 66, 67, 68], "port": [3, 5, 7, 9, 13, 15, 17, 64, 66, 67, 68], "5432": [3, 17, 64, 66, 67, 68], "host": [3, 5, 7, 9, 13, 15, 17, 64, 65, 66, 67, 68], "localhost": [3, 17, 64, 66, 67, 68], "dbname": 3, "user": [3, 5, 7, 9, 13, 15, 17, 64, 65, 66, 67, 68], "usenam": 3, "password": [3, 5, 7, 9, 13, 15, 17, 64, 65, 66, 67, 68], "list": [3, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 24, 25, 31, 32, 33, 38, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 56, 57, 58, 60, 64, 65, 66, 67, 68], "tabl": [3, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68], "some": [3, 19, 20, 21, 22, 26, 27, 28, 29, 30, 34, 37, 41, 42, 43, 52, 55, 60], "schema": [3, 5, 7, 9, 13, 15, 17, 67, 68], "somet": 3, "filter": [3, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 51, 63], "e": [3, 5, 44, 47, 50], "g": [3, 5, 44, 47, 50], "match": [3, 36, 68], "col1": [3, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 41, 42, 43, 44, 45, 47, 48, 50, 52, 55, 56, 57, 58, 59, 60], "panda": [3, 11, 68], "datafram": [3, 11], "df": 3, "creat": [3, 5, 11, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 60, 63], "oper": [3, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "perform": [3, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 68], "col2": [3, 19, 20, 21, 22, 24, 25, 41, 42, 43, 45, 47, 48, 52, 56, 57, 58, 60], "1": [3, 11, 21, 22, 24, 26, 27, 29, 30, 31, 32, 34, 45, 50, 63], "2": [3, 14, 22, 24, 31, 32, 59, 63, 65], "col3": [3, 19, 20, 47, 57], "set": [3, 11, 63], "up": 3, "henc": 3, "make": [3, 38], "sure": 3, "sourc": [3, 5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "env": 3, "info": [3, 9, 64, 65, 66, 67, 68], "path": [3, 5, 11], "bin": 3, "activ": 3, "In": 3, "order": [3, 11, 52, 54, 56, 57], "depend": 3, "test": [3, 63], "codestyl": 3, "unit": [3, 9], "integr": 3, "built": 3, "sphinx": 3, "local": 3, "doc": 3, "cd": 3, "html": 3, "sphinxopt": 3, "d": 3, "nbsphinx_allow_error": 3, "true": [3, 5, 7, 9, 11, 13, 15, 17, 19, 20, 35, 38, 52, 55, 61, 64, 65, 67, 68], "welcom": 3, "see": 3, "cite": 3, "when": [3, 5, 38, 47, 54], "project": 3, "research": 3, "paper": 3, "articl": 3, "krishnan2022": 3, "12": [3, 64, 66, 67, 68], "02": 3, "22283021": 3, "author": 3, "krishnan": 3, "amrit": 3, "subasri": 3, "vallijah": 3, "mckeen": 3, "kaden": 3, "kore": 3, "ali": 3, "ogidi": 3, "franklin": 3, "alinoori": 3, "mahshid": 3, "lalani": 3, "nadim": 3, "dhalla": 3, "azra": 3, "verma": 3, "amol": 3, "razak": 3, "fahad": 3, "pandya": 3, "deval": 3, "dolatabadi": 3, "elham": 3, "titl": [3, 63], "cyclic": 3, "toward": 3, "operation": 3, "ml": 3, "model": [3, 68], "eloc": 3, "id": [3, 17], "2022": [3, 68], "year": [3, 15, 32, 33, 44, 63, 68], "doi": 3, "10": [3, 49, 63], "1101": 3, "publish": 3, "cold": 3, "spring": 3, "harbor": 3, "laboratori": 3, "press": 3, "url": 3, "http": 3, "www": 3, "medrxiv": 3, "org": 3, "content": 3, "earli": 3, "08": 3, "journal": 3, "class": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "none": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 52, 59, 60], "object": [5, 9, 10, 11, 13, 15, 17, 20, 21, 24, 26, 27, 46, 53, 58, 63], "queri": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 49, 51, 53, 58, 62, 63, 64, 65, 66, 68], "orm": [5, 11, 63, 64, 65, 66, 67, 68], "paramet": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68], "str": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 57, 58, 59, 60, 67], "manag": 5, "system": 5, "mysql": 5, "sqlite": 5, "option": [5, 7, 9, 11, 13, 15, 17, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 46, 47, 61], "usernam": [5, 64, 65, 66, 67, 68], "default": [5, 11, 37], "empti": [5, 42], "Not": 5, "pwd": [5, 64, 66, 67, 68], "address": 5, "int": [5, 11, 22, 25, 32, 33, 47, 49, 58, 59], "number": [5, 39, 49, 57, 63], "name": [5, 7, 9, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 51, 55, 56, 57, 59, 68], "note": [5, 15, 64, 68], "thi": [5, 22, 38, 46, 47, 64, 65, 66, 67, 68], "intend": 5, "subclass": 5, "provid": [5, 7, 9, 13, 15, 17, 24, 38, 45, 46, 52, 62, 68], "method": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66], "automat": 5, "ar": [5, 15, 24, 47], "after": [5, 15, 24, 26, 57, 58, 63], "self": 5, "schema_nam": [5, 7, 9, 13, 15, 17, 68], "table_nam": [5, 7, 9, 13, 15, 17], "instanti": [5, 63], "custom": [5, 7, 9, 13, 15, 17, 66], "build": [5, 63], "cast_timestamp_col": [5, 7, 9, 13, 15, 17], "possibli": [5, 7, 9, 13, 15, 17], "map": [5, 7, 9, 13, 15, 17, 55], "column": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 57, 59, 60], "have": [5, 7, 9, 13, 15, 17, 31, 38, 47, 63], "standard": [5, 7, 9, 13, 15, 17], "allow": [5, 7, 9, 13, 15, 17, 63], "recogn": [5, 7, 9, 13, 15, 17], "downstream": [5, 7, 9, 13, 15, 17], "process": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61], "bool": [5, 7, 9, 11, 13, 15, 17, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 51, 52, 55, 61], "whether": [5, 7, 9, 11, 13, 15, 17, 38, 52, 55, 61], "timestamp": [5, 7, 9, 13, 15, 17, 25, 26, 27, 32, 33, 44, 65], "datetim": [5, 7, 9, 13, 15, 17, 21, 26, 27], "return": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68], "select": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 67], "subqueri": [5, 7, 9, 11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61], "modul": [6, 8, 12, 14, 15], "support": [6, 12, 14, 25], "care": [9, 15], "fetch": [9, 11], "transfer": 9, "multipl": [9, 23, 24, 46, 51], "construct": [9, 13, 15, 17, 20, 21], "wrap": [9, 10, 11, 13, 15, 17], "diagnosi": [9, 13, 15, 64], "report": [9, 63], "encount": [9, 63], "room": 9, "A": [10, 11, 21, 26, 27, 47], "dataclass": 11, "them": 11, "dbtabl": [11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61], "initi": [11, 58], "chain": [11, 58], "attribut": 11, "clear": 11, "contain": [11, 63], "thu": 11, "properti": 11, "join_tabl": [11, 47, 64, 66, 67, 68], "on_to_typ": [11, 47], "cond": [11, 47], "table_col": [11, 47], "join_table_col": [11, 47], "isout": [11, 47, 68], "fals": [11, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 51, 52, 61, 65], "anoth": [11, 47, 55, 58], "tupl": [11, 47], "": [11, 17, 24, 45, 64, 65, 66, 67, 68], "binaryexpress": [11, 47], "origin": 11, "outer": [11, 47], "ad": [11, 19, 20, 21, 22, 58], "index_col": [11, 67], "batch_mod": [11, 67], "batch_siz": [11, 67], "1000000": 11, "dtype_backend": 11, "pyarrow": [11, 68], "No": [11, 68], "row": [11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 49, 52, 54, 63, 65, 66, 67, 68], "backend": 11, "comput": 11, "framework": 11, "dask": 11, "becom": [11, 54], "index": [11, 58, 59, 63], "defin": 11, "partit": [11, 63], "should": 11, "server": 11, "ani": [11, 20, 28, 29, 30, 31, 34, 37, 38, 45, 50], "batch": [11, 63], "mode": 11, "gener": [11, 68], "size": 11, "million": 11, "result": [11, 58, 64, 66, 67, 68], "file_format": 11, "parquet": 11, "where": [11, 59], "csv": [11, 68], "upstream": 11, "other": [11, 19, 57, 58], "0": [14, 45, 59, 64, 65, 66, 67, 68], "icu": 15, "chart": [15, 63], "event": [15, 63], "lab": [15, 63, 65], "hospit": [15, 63], "function": [15, 19, 20, 21, 22, 24, 46, 53, 60, 63, 64, 65, 66, 67, 68], "infer": 15, "approxim": 15, "receiv": 15, "anchor_year": 15, "anchor_year_group": 15, "suppli": 15, "dod": 15, "adjust": 15, "procedur": 15, "src_tabl": 17, "src_col": 17, "dst_col": 17, "concept": [17, 68], "each": [17, 24, 52, 63, 64, 66, 67, 68], "somecol_concept_id": 17, "somecol_concept_nam": 17, "specifi": [17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 46, 47, 48, 57, 60], "accord": [17, 64, 66, 67, 68], "correspond": [17, 42, 43], "consid": 17, "assign": 17, "add_to": [19, 20, 21, 22], "col": [19, 24, 25, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 50, 52, 56, 57, 59, 60], "neg": [19, 20], "new_col_label": [19, 20, 21, 22, 59, 60], "add": [19, 20, 21, 22, 50, 58], "being": [19, 20, 21, 22, 26, 27, 29, 32, 33], "subtract": [19, 20], "rather": [19, 20], "than": [19, 20, 30, 34, 63], "new": [19, 20, 21, 22, 24, 45, 46, 50, 56, 59, 60], "label": [19, 20, 21, 22, 44, 46, 50, 60, 66, 67], "otherwis": [19, 20, 21, 22, 60], "exist": [19, 20, 21, 22, 55, 60], "exampl": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63], "col1_plus_col2": [19, 20], "col1_plus_col3": 19, "col2_plus_col3": 19, "pai": 19, "attent": 19, "combin": [19, 23, 51], "work": 19, "wherea": 19, "delta_kwarg": 20, "interv": 20, "argument": [20, 28, 29, 30, 31, 34, 37, 38], "delta": 21, "timedelta": 21, "dai": 21, "col1_plus_1": [21, 22], "numer": 22, "valu": [22, 29, 30, 31, 34, 42, 43, 45, 46, 47, 50], "float": [22, 25], "col2_plus_1": 22, "cond_op": [23, 51], "lab_nam": [23, 35, 46, 51], "hba1c": [23, 35, 51], "john": [23, 51], "jane": [23, 51], "return_cond": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51], "instead": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 51], "func": 24, "new_col": 24, "take": [24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 63], "also": 24, "singl": 24, "assum": [24, 64, 66, 67, 68], "input": 24, "callabl": 24, "lambda": 24, "x": 24, "col1_new": [24, 45, 55], "y": 24, "col2_new": [24, 45], "noqa": 24, "e501": 24, "pylint": 24, "disabl": 24, "line": 24, "too": 24, "long": [24, 63], "type_": 25, "current": 25, "convers": 25, "date": [25, 26, 27], "convert": [25, 47], "must": [25, 31, 32, 33, 38, 46], "timestamp_col": [26, 27, 32, 33, 44], "not_": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "binarize_col": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "yyyi": [26, 27], "mm": [26, 27], "dd": [26, 27], "negat": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "boolean": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "2020": [26, 27, 33, 63], "01": [26, 27, 65, 67, 68], "col1_bool": [26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38], "string": [28, 37, 46, 47, 50, 59, 60, 63], "cond_kwarg": [28, 29, 30, 31, 34, 37, 38], "end": [28, 58, 63], "keyword": [28, 29, 30, 31, 34, 37, 38, 61, 63], "equal": [29, 30, 34], "greater": [30, 34], "month": [32, 44], "2019": [33, 68], "less": [34, 63], "pattern": 35, "lab_name_bool": 35, "regex": 36, "regular": 36, "express": 36, "any_": 38, "differ": [38, 47], "onli": [38, 47, 48, 63], "one": [38, 63], "just": 38, "b": 38, "person_id": [39, 40, 46, 68], "visit_id": 40, "remov": [42, 43], "null": [43, 45], "extract_str": 44, "extract": [44, 59, 64, 65, 66, 67, 68], "compon": 44, "time": 44, "inform": 44, "fill_valu": 45, "new_col_nam": [45, 59], "given": [45, 58], "groupby_col": 46, "aggfunc": 46, "aggsep": 46, "over": 46, "group": 46, "dict": [46, 55], "sequenc": [46, 58], "dictionari": 46, "kei": [46, 55, 58], "pair": 46, "prevent": 46, "same": [46, 47], "string_aggfunc": 46, "separ": 46, "string_agg": 46, "visit_count": 46, "lab_name_agg": 46, "repres": 47, "both": 47, "suggest": 47, "oppos": 47, "two": [47, 58, 61], "flag": 47, "sai": 47, "left": 47, "table2": [47, 61], "table1": [47, 61], "neither": 47, "nor": 47, "expens": 47, "cartesian": 47, "product": 47, "integ": 50, "OR": 51, "ascend": [52, 65], "sort": [52, 63], "descend": 52, "arg": [53, 54, 58], "kwarg": [53, 54], "abstract": 53, "implement": 53, "call": 53, "random": 54, "so": 54, "certain": 54, "cannot": 54, "seen": 54, "analyz": 54, "quit": 54, "slow": 54, "larg": 54, "rename_map": 55, "check_exist": 55, "complet": 56, "come": 57, "follow": [57, 68], "ordereddict": 58, "execut": [58, 64, 65, 66, 67, 68], "final": 58, "op_": 58, "slice": 58, "start_index": 59, "stop_index": 59, "ha": 59, "stop": 59, "col1_substr": 59, "whitespac": 60, "col1_trim": 60, "col2_trim": 60, "union_t": 61, "first": [61, 64, 66, 67, 68], "cyclop": [63, 64, 65, 66, 68], "commun": 63, "male": 63, "mortal": 63, "outcom": 63, "femal": 63, "gastroenter": 63, "icd": 63, "9": [63, 68], "3": [63, 65, 68], "potassium": 63, "4": [63, 65, 68], "aado2": 63, "carevu": 63, "valuenum": 63, "20": 63, "admiss": [63, 66], "2021": [63, 68], "later": 63, "approx": 63, "schizophrenia": 63, "2015": [63, 68], "advanc": 63, "chronic": 63, "routin": 63, "vital": [63, 65], "sign": 63, "5": [63, 64, 65, 66, 68], "hemoglobin": 63, "2009": 63, "6": [63, 65, 66, 68], "radiologi": [63, 65], "lymphadenopathi": 63, "infecti": 63, "occur": 63, "togeth": 63, "7": [63, 65, 68], "subject_id": [63, 66], "8": [63, 68], "raw": 63, "discharg": 63, "2014": [63, 68], "100": [63, 66, 67, 68], "diagnosisstr": 63, "teach": 63, "glucos": 63, "medic": 63, "search": 63, "visit": 63, "2010": 63, "sepsi": 63, "1a": 63, "per": 63, "most": 63, "recent": 63, "patient_id_hash": 63, "discharge_date_tim": 63, "1b": 63, "abov": 63, "subset": 63, "who": 63, "were": 63, "between": 63, "april": 63, "march": 63, "31": 63, "2016": [63, 68], "1c": 63, "total": 63, "2a": 63, "how": [63, 64, 66, 67, 68], "sodium": 63, "place": 63, "apr": 63, "mai": 63, "101": 63, "notebook": [64, 65, 66, 67, 68], "quick": [64, 66, 67, 68], "instruct": [64, 66, 67, 68], "postgr": [64, 66, 67, 68], "updat": [64, 66, 67, 68], "config": [64, 66, 67, 68], "pass": [64, 66, 67, 68], "accordingli": [64, 66, 67, 68], "eicu_crd": 64, "2024": [64, 66, 67, 68], "03": [64, 65, 66, 67, 68], "04": [64, 65, 66, 67, 68], "21": [64, 65, 67], "55": 64, "993": 64, "readi": [64, 65, 66, 67, 68], "39": [64, 65, 66, 67, 68], "admissiondrug": 64, "admissiondx": 64, "allergi": 64, "apacheapsvar": 64, "apachepatientresult": 64, "apachepredvar": 64, "careplancareprovid": 64, "careplaneol": 64, "careplangener": 64, "careplango": 64, "careplaninfectiousdiseas": 64, "customlab": 64, "infusiondrug": 64, "intakeoutput": 64, "microlab": 64, "nurseassess": 64, "nursecar": 64, "nursechart": 64, "pasthistori": 64, "physicalexam": 64, "respiratorycar": 64, "respiratorychart": 64, "treatment": 64, "vitalaperiod": 64, "vitalperiod": 64, "hospitaldischargeyear": 64, "gender": [64, 66, 67], "print": [64, 65, 66, 67, 68], "f": [64, 65, 66, 67, 68], "len": [64, 65, 66, 67, 68], "56": 64, "860": 64, "successfulli": [64, 65, 66, 67, 68], "861": 64, "util": [64, 65, 66, 67, 68], "profil": [64, 65, 66, 67, 68], "finish": [64, 65, 66, 67, 68], "run_queri": [64, 65, 66, 67, 68], "053309": 64, "patient_diagnos": 64, "patientunitstayid": 64, "959": 64, "960": 64, "078475": 64, "teachingstatu": 64, "hospitalid": 64, "labnam": 64, "patient_lab": [64, 66], "57": 64, "038": 64, "039": 64, "050962": 64, "drugnam": 64, "patient_med": 64, "230": [64, 66], "232": 64, "166436": 64, "hpc": 65, "ca": 65, "delirium_v4_0_1": 65, "public": [65, 67, 68], "2023": [65, 68], "09": 65, "17": 65, "45": 65, "449": 65, "lookup_icd10_ca_descript": 65, "lookup_statcan": 65, "lookup_cci": 65, "lookup_icd10_ca_to_ccsr": 65, "lookup_ip_administr": 65, "lookup_lab_concept": 65, "lookup_vitals_concept": 65, "lookup_pharmacy_concept": 65, "lookup_diagnosi": 65, "locality_vari": 65, "admdad": 65, "derived_vari": 65, "ipscu": 65, "lookup_phy_characterist": 65, "ipintervent": 65, "lookup_ccsr": 65, "lookup_pharmacy_rout": 65, "lookup_transfusion_concept": 65, "lookup_ip_scu": 65, "lookup_er_administr": 65, "lookup_imag": 65, "pharmaci": 65, "lookup_transf": 65, "ipdiagnosi": 65, "lookup_room_transf": 65, "er": 65, "erdiagnosi": 65, "erintervent": 65, "roomtransf": 65, "transfus": 65, "lookup_hospital_num": 65, "51": 65, "902": 65, "903": 65, "093352": 65, "189734": 65, "encounters_queri": 65, "52": [65, 68], "591": 65, "592": 65, "675141": 65, "32567": 65, "hospital_num": 65, "encounters_per_sit": 65, "856": 65, "857": 65, "145693": 65, "lab_op": 65, "collection_date_tim": 65, "05": 65, "test_type_map": 65, "encounters_lab": 65, "genc_id": 65, "sodium_test": 65, "26": [65, 67, 68], "19": 65, "814": 65, "815": 65, "506": 65, "939296": 65, "9305": 65, "v1": [66, 68], "22": 66, "07": 66, "expire_flag": 66, "14": [66, 68], "180": 66, "182": 66, "044276": 66, "patient_admiss": [66, 67], "long_titl": [66, 67], "patient_admissions_diagnos": [66, 67], "hadm_id": [66, 67], "318": 66, "320": 66, "102113": 66, "389": 66, "390": 66, "036997": 66, "chartevents_op": 66, "dbsourc": 66, "chart_ev": [66, 67], "patient_chart_ev": 66, "23": [66, 67], "25": [66, 67, 68], "649": 66, "650": 66, "71": 66, "217257": 66, "v2": [67, 68], "30": 67, "378": 67, "fhir_etl": 67, "fhir_trm": 67, "information_schema": [67, 68], "mimic_fhir": 67, "mimiciv_deriv": 67, "mimiciv_": 67, "mimiciv_hosp": 67, "mimiciv_icu": 67, "mimiciv_not": 67, "admittim": 67, "dischtim": 67, "anchor_year_differ": 67, "33": [67, 68], "393": 67, "394": 67, "213048": 67, "diagnoses_op": 67, "icd_vers": 67, "34": 67, "120": 67, "122": 67, "693323": 67, "r": 67, "35": 67, "644": 67, "646": 67, "490150": 67, "82": 67, "categori": 67, "patient_admissions_vit": 67, "00": 67, "541": 67, "542": 67, "84": 67, "862089": 67, "patient_admissions_lab": 67, "13": [67, 68], "381": 67, "383": 67, "72": 67, "801402": 67, "radiology_not": 67, "radiology_notes_op": 67, "text": 67, "patient_admissions_radiology_not": 67, "361": 67, "363": 67, "942154": 67, "1000": 67, "patient_admissions_df": 67, "next": 67, "717": 67, "718": 67, "306524": 67, "999": 67, "848": 67, "849": 67, "006945": 67, "common": 68, "showcas": 68, "synthea": 68, "releas": 68, "etl": 68, "load": 68, "hous": 68, "pd": 68, "synthea_integration_test": 68, "cdm_synthea10": 68, "310": 68, "observation_period": 68, "condition_occurr": 68, "drug_exposur": 68, "procedure_occurr": 68, "device_exposur": 68, "death": 68, "note_nlp": 68, "specimen": 68, "fact_relationship": 68, "locat": 68, "care_sit": 68, "payer_plan_period": 68, "cost": 68, "drug_era": 68, "dose_era": 68, "condition_era": 68, "episod": 68, "episode_ev": 68, "metadata": 68, "cdm_sourc": 68, "vocabulari": 68, "domain": 68, "concept_class": 68, "concept_relationship": 68, "relationship": 68, "concept_synonym": 68, "concept_ancestor": 68, "source_to_concept_map": 68, "drug_strength": 68, "cohort": 68, "cohort_definit": 68, "source_to_standard_vocab_map": 68, "source_to_source_vocab_map": 68, "all_visit": 68, "assign_all_visit_id": 68, "final_visit_id": 68, "visit_start_d": 68, "to_datetim": 68, "dt": 68, "value_count": 68, "sort_index": 68, "799": 68, "800": 68, "055747": 68, "2011": 68, "2012": 68, "2013": 68, "15": 68, "2017": 68, "2018": 68, "dtype": 68, "int64": 68, "visits_measur": 68, "visit_occurrence_id": 68, "906": 68, "908": 68, "056394": 68, "repo": 68, "696": 68, "visits_concept_map": 68, "discharge_to_concept_id": 68, "admitting_concept_id": 68, "visits_concept_mapped_di": 68, "discharge_to_concept_nam": 68, "di": 68, "37": 68, "081": 68, "082": 68, "000097": 68, "5815": 68, "gender_concept_nam": 68, "person_visit": 68, "person_visits_condit": 68, "person_visits_conditions_measur": 68, "condition_concept_id": 68, "condition_concept_nam": 68, "014": 68, "016": 68, "862743": 68, "measurement_concept_nam": 68, "95": 68, "bodi": 68, "temperatur": 68}, "objects": {"": [[62, 0, 0, "-", "cycquery"]], "cycquery": [[4, 0, 0, "-", "base"], [6, 0, 0, "-", "eicu"], [8, 0, 0, "-", "gemini"], [10, 0, 0, "-", "interface"], [12, 0, 0, "-", "mimiciii"], [14, 0, 0, "-", "mimiciv"], [16, 0, 0, "-", "omop"], [18, 0, 0, "-", "ops"]], "cycquery.base": [[5, 1, 1, "", "DatasetQuerier"]], "cycquery.base.DatasetQuerier": [[5, 2, 1, "", "db"], [5, 3, 1, "", "get_table"], [5, 3, 1, "", "list_columns"], [5, 3, 1, "", "list_custom_tables"], [5, 3, 1, "", "list_schemas"], [5, 3, 1, "", "list_tables"]], "cycquery.eicu": [[7, 1, 1, "", "EICUQuerier"]], "cycquery.eicu.EICUQuerier": [[7, 3, 1, "", "get_table"], [7, 3, 1, "", "list_columns"], [7, 3, 1, "", "list_custom_tables"], [7, 3, 1, "", "list_schemas"], [7, 3, 1, "", "list_tables"]], "cycquery.gemini": [[9, 1, 1, "", "GEMINIQuerier"]], "cycquery.gemini.GEMINIQuerier": [[9, 3, 1, "", "care_units"], [9, 3, 1, "", "diagnoses"], [9, 3, 1, "", "get_table"], [9, 3, 1, "", "imaging"], [9, 3, 1, "", "ip_admin"], [9, 3, 1, "", "list_columns"], [9, 3, 1, "", "list_custom_tables"], [9, 3, 1, "", "list_schemas"], [9, 3, 1, "", "list_tables"], [9, 3, 1, "", "room_transfer"]], "cycquery.interface": [[11, 1, 1, "", "QueryInterface"]], "cycquery.interface.QueryInterface": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "clear_data"], [11, 4, 1, "", "data"], [11, 3, 1, "", "join"], [11, 3, 1, "", "ops"], [11, 3, 1, "", "run"], [11, 3, 1, "", "save"], [11, 3, 1, "", "union"], [11, 3, 1, "", "union_all"]], "cycquery.mimiciii": [[13, 1, 1, "", "MIMICIIIQuerier"]], "cycquery.mimiciii.MIMICIIIQuerier": [[13, 3, 1, "", "chartevents"], [13, 3, 1, "", "diagnoses"], [13, 3, 1, "", "get_table"], [13, 3, 1, "", "labevents"], [13, 3, 1, "", "list_columns"], [13, 3, 1, "", "list_custom_tables"], [13, 3, 1, "", "list_schemas"], [13, 3, 1, "", "list_tables"]], "cycquery.mimiciv": [[15, 1, 1, "", "MIMICIVQuerier"]], "cycquery.mimiciv.MIMICIVQuerier": [[15, 3, 1, "", "chartevents"], [15, 3, 1, "", "diagnoses_icd"], [15, 3, 1, "", "get_table"], [15, 3, 1, "", "labevents"], [15, 3, 1, "", "list_columns"], [15, 3, 1, "", "list_custom_tables"], [15, 3, 1, "", "list_schemas"], [15, 3, 1, "", "list_tables"], [15, 3, 1, "", "patients"], [15, 3, 1, "", "procedures_icd"]], "cycquery.omop": [[17, 1, 1, "", "OMOPQuerier"]], "cycquery.omop.OMOPQuerier": [[17, 3, 1, "", "get_table"], [17, 3, 1, "", "list_columns"], [17, 3, 1, "", "list_custom_tables"], [17, 3, 1, "", "list_schemas"], [17, 3, 1, "", "list_tables"], [17, 3, 1, "", "map_concept_ids_to_name"], [17, 3, 1, "", "measurement"], [17, 3, 1, "", "observation"], [17, 3, 1, "", "person"], [17, 3, 1, "", "visit_detail"], [17, 3, 1, "", "visit_occurrence"]], "cycquery.ops": [[19, 1, 1, "", "AddColumn"], [20, 1, 1, "", "AddDeltaColumn"], [21, 1, 1, "", "AddDeltaConstant"], [22, 1, 1, "", "AddNumeric"], [23, 1, 1, "", "And"], [24, 1, 1, "", "Apply"], [25, 1, 1, "", "Cast"], [26, 1, 1, "", "ConditionAfterDate"], [27, 1, 1, "", "ConditionBeforeDate"], [28, 1, 1, "", "ConditionEndsWith"], [29, 1, 1, "", "ConditionEquals"], [30, 1, 1, "", "ConditionGreaterThan"], [31, 1, 1, "", "ConditionIn"], [32, 1, 1, "", "ConditionInMonths"], [33, 1, 1, "", "ConditionInYears"], [34, 1, 1, "", "ConditionLessThan"], [35, 1, 1, "", "ConditionLike"], [36, 1, 1, "", "ConditionRegexMatch"], [37, 1, 1, "", "ConditionStartsWith"], [38, 1, 1, "", "ConditionSubstring"], [39, 1, 1, "", "Count"], [40, 1, 1, "", "Distinct"], [41, 1, 1, "", "Drop"], [42, 1, 1, "", "DropEmpty"], [43, 1, 1, "", "DropNulls"], [44, 1, 1, "", "ExtractTimestampComponent"], [45, 1, 1, "", "FillNull"], [46, 1, 1, "", "GroupByAggregate"], [47, 1, 1, "", "Join"], [48, 1, 1, "", "Keep"], [49, 1, 1, "", "Limit"], [50, 1, 1, "", "Literal"], [51, 1, 1, "", "Or"], [52, 1, 1, "", "OrderBy"], [53, 1, 1, "", "QueryOp"], [54, 1, 1, "", "RandomizeOrder"], [55, 1, 1, "", "Rename"], [56, 1, 1, "", "Reorder"], [57, 1, 1, "", "ReorderAfter"], [58, 1, 1, "", "Sequential"], [59, 1, 1, "", "Substring"], [60, 1, 1, "", "Trim"], [61, 1, 1, "", "Union"]], "cycquery.ops.AddColumn": [[19, 3, 1, "", "__call__"]], "cycquery.ops.AddDeltaColumn": [[20, 3, 1, "", "__call__"]], "cycquery.ops.AddDeltaConstant": [[21, 3, 1, "", "__call__"]], "cycquery.ops.AddNumeric": [[22, 3, 1, "", "__call__"]], "cycquery.ops.And": [[23, 3, 1, "", "__call__"]], "cycquery.ops.Apply": [[24, 3, 1, "", "__call__"]], "cycquery.ops.Cast": [[25, 3, 1, "", "__call__"]], "cycquery.ops.ConditionAfterDate": [[26, 3, 1, "", "__call__"]], "cycquery.ops.ConditionBeforeDate": [[27, 3, 1, "", "__call__"]], "cycquery.ops.ConditionEndsWith": [[28, 3, 1, "", "__call__"]], "cycquery.ops.ConditionEquals": [[29, 3, 1, "", "__call__"]], "cycquery.ops.ConditionGreaterThan": [[30, 3, 1, "", "__call__"]], "cycquery.ops.ConditionIn": [[31, 3, 1, "", "__call__"]], "cycquery.ops.ConditionInMonths": [[32, 3, 1, "", "__call__"]], "cycquery.ops.ConditionInYears": [[33, 3, 1, "", "__call__"]], "cycquery.ops.ConditionLessThan": [[34, 3, 1, "", "__call__"]], "cycquery.ops.ConditionLike": [[35, 3, 1, "", "__call__"]], "cycquery.ops.ConditionRegexMatch": [[36, 3, 1, "", "__call__"]], "cycquery.ops.ConditionStartsWith": [[37, 3, 1, "", "__call__"]], "cycquery.ops.ConditionSubstring": [[38, 3, 1, "", "__call__"]], "cycquery.ops.Count": [[39, 3, 1, "", "__call__"]], "cycquery.ops.Distinct": [[40, 3, 1, "", "__call__"]], "cycquery.ops.Drop": [[41, 3, 1, "", "__call__"]], "cycquery.ops.DropEmpty": [[42, 3, 1, "", "__call__"]], "cycquery.ops.DropNulls": [[43, 3, 1, "", "__call__"]], "cycquery.ops.ExtractTimestampComponent": [[44, 3, 1, "", "__call__"]], "cycquery.ops.FillNull": [[45, 3, 1, "", "__call__"]], "cycquery.ops.GroupByAggregate": [[46, 3, 1, "", "__call__"]], "cycquery.ops.Join": [[47, 3, 1, "", "__call__"]], "cycquery.ops.Keep": [[48, 3, 1, "", "__call__"]], "cycquery.ops.Limit": [[49, 3, 1, "", "__call__"]], "cycquery.ops.Literal": [[50, 3, 1, "", "__call__"]], "cycquery.ops.Or": [[51, 3, 1, "", "__call__"]], "cycquery.ops.OrderBy": [[52, 3, 1, "", "__call__"]], "cycquery.ops.QueryOp": [[53, 3, 1, "", "__call__"]], "cycquery.ops.RandomizeOrder": [[54, 3, 1, "", "__call__"]], "cycquery.ops.Rename": [[55, 3, 1, "", "__call__"]], "cycquery.ops.Reorder": [[56, 3, 1, "", "__call__"]], "cycquery.ops.ReorderAfter": [[57, 3, 1, "", "__call__"]], "cycquery.ops.Sequential": [[58, 3, 1, "", "__add__"], [58, 3, 1, "", "__call__"], [58, 3, 1, "", "__init__"], [58, 3, 1, "", "append"], [58, 3, 1, "", "extend"], [58, 3, 1, "", "insert"], [58, 3, 1, "", "pop"]], "cycquery.ops.Substring": [[59, 3, 1, "", "__call__"]], "cycquery.ops.Trim": [[60, 3, 1, "", "__call__"]], "cycquery.ops.Union": [[61, 3, 1, "", "__call__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"api": [0, 62], "refer": 0, "contribut": [1, 3], "cyclop": [1, 2, 3, 67], "queri": [1, 2, 3, 67], "pre": 1, "commit": 1, "hook": 1, "code": 1, "guidelin": 1, "welcom": 2, "": 2, "document": [2, 3], "content": 2, "get": [3, 64, 65, 66, 67, 68], "start": 3, "instal": 3, "us": [3, 67], "pip": 3, "postgresql": 3, "databas": 3, "develop": 3, "poetri": 3, "citat": 3, "cycqueri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "base": [4, 5], "datasetqueri": 5, "eicu": [6, 7, 64], "eicuqueri": [7, 64], "gemini": [8, 9, 65], "geminiqueri": [9, 65], "interfac": [10, 11], "queryinterfac": 11, "mimiciii": [12, 13], "mimiciiiqueri": [13, 66], "mimiciv": [14, 15], "mimicivqueri": [15, 67], "omop": [16, 17, 68], "omopqueri": [17, 68], "op": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 67], "addcolumn": 19, "adddeltacolumn": 20, "adddeltaconst": 21, "addnumer": 22, "And": 23, "appli": 24, "cast": 25, "conditionafterd": 26, "conditionbefored": 27, "conditionendswith": 28, "conditionequ": 29, "conditiongreaterthan": 30, "conditionin": 31, "conditioninmonth": 32, "conditioninyear": 33, "conditionlessthan": 34, "conditionlik": 35, "conditionregexmatch": [36, 67], "conditionstartswith": 37, "conditionsubstr": 38, "count": 39, "distinct": 40, "drop": 41, "dropempti": 42, "dropnul": 43, "extracttimestampcompon": 44, "fillnul": 45, "groupbyaggreg": 46, "join": 47, "keep": [48, 65], "limit": [49, 64], "liter": 50, "Or": 51, "orderbi": 52, "queryop": 53, "randomizeord": 54, "renam": 55, "reorder": 56, "reorderaft": 57, "sequenti": 58, "substr": [59, 64], "trim": 60, "union": 61, "dataset": [62, 65], "tutori": [63, 64, 65, 66, 67, 68], "crd": 64, "import": [64, 65, 66, 67, 68], "instanti": [64, 65, 66, 67, 68], "exampl": [64, 65, 66, 67, 68], "1": [64, 65, 66, 67, 68], "all": [64, 66, 67, 68], "femal": [64, 66, 67, 68], "patient": [64, 65, 66, 67, 68], "discharg": [64, 65], "2014": 64, "100": 64, "row": 64, "2": [64, 66, 67, 68], "encount": [64, 65, 66, 67], "diagnos": [64, 66, 67, 68], "schizophrenia": [64, 67], "diagnosisstr": 64, "year": [64, 67], "2015": [64, 65, 67], "3": [64, 66, 67], "potassium": [64, 66], "lab": [64, 66, 67], "test": [64, 65, 66, 67], "teach": 64, "hospit": [64, 65], "4": [64, 66, 67], "glucos": 64, "medic": 64, "search": 64, "1a": 65, "creat": 65, "tabl": 65, "onli": 65, "one": 65, "per": 65, "most": 65, "recent": 65, "each": 65, "sort": 65, "patient_id_hash": 65, "discharge_date_tim": 65, "record": 65, "1b": 65, "from": [65, 67], "abov": 65, "set": 65, "take": 65, "subset": 65, "who": 65, "were": 65, "between": 65, "april": 65, "march": 65, "31": 65, "2016": 65, "1c": 65, "total": 65, "number": 65, "admiss": [65, 67], "2a": 65, "how": 65, "mani": 65, "sodium": 65, "place": 65, "apr": 65, "mai": 65, "101": 65, "mimic": [66, 67], "iii": 66, "male": 66, "mortal": [66, 68], "outcom": [66, 68], "gastroenter": 66, "icd": [66, 67], "9": [66, 67], "long": [66, 67], "titl": [66, 67], "aado2": 66, "carevu": 66, "chart": 66, "event": 66, "have": 66, "valuenum": 66, "less": 66, "than": 66, "20": 66, "iv": 67, "2021": 67, "later": 67, "approx": 67, "10": 67, "advanc": 67, "contain": 67, "chronic": 67, "routin": 67, "vital": 67, "sign": 67, "5": 67, "hemoglobin": 67, "2009": 67, "6": 67, "radiologi": 67, "report": 67, "filter": 67, "keyword": 67, "lymphadenopathi": 67, "infecti": 67, "occur": 67, "togeth": 67, "7": 67, "return": 67, "batch": 67, "partit": 67, "index": 67, "subject_id": 67, "8": 67, "run": 67, "raw": 67, "sql": 67, "string": 67, "visit": 68, "after": 68, "2010": 68, "measur": 68, "2020": 68, "end": 68, "sepsi": 68}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Contributing to cyclops-query": [[1, "contributing-to-cyclops-query"]], "Pre-commit hooks": [[1, "pre-commit-hooks"]], "Coding guidelines": [[1, "coding-guidelines"]], "Welcome to cyclops-query\u2019s documentation!": [[2, "welcome-to-cyclops-query-s-documentation"]], "Contents:": [[2, null]], "cyclops-query": [[3, "cyclops-query"]], "\ud83d\udc23 Getting Started": [[3, "getting-started"]], "Installing cyclops-query using pip": [[3, "installing-cyclops-query-using-pip"]], "Query postgresql database": [[3, "query-postgresql-database"]], "\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udcbb Developing": [[3, "developing"]], "Using poetry": [[3, "using-poetry"]], "Contributing": [[3, "contributing"]], "\ud83d\udcda Documentation": [[3, "documentation"]], "\ud83c\udf93 Citation": [[3, "citation"]], "cycquery.base": [[4, "module-cycquery.base"]], "cycquery.base.DatasetQuerier": [[5, "cycquery-base-datasetquerier"]], "cycquery.eicu": [[6, "module-cycquery.eicu"]], "cycquery.eicu.EICUQuerier": [[7, "cycquery-eicu-eicuquerier"]], "cycquery.gemini": [[8, "module-cycquery.gemini"]], "cycquery.gemini.GEMINIQuerier": [[9, "cycquery-gemini-geminiquerier"]], "cycquery.interface": [[10, "module-cycquery.interface"]], "cycquery.interface.QueryInterface": [[11, "cycquery-interface-queryinterface"]], "cycquery.mimiciii": [[12, "module-cycquery.mimiciii"]], "cycquery.mimiciii.MIMICIIIQuerier": [[13, "cycquery-mimiciii-mimiciiiquerier"]], "cycquery.mimiciv": [[14, "module-cycquery.mimiciv"]], "cycquery.mimiciv.MIMICIVQuerier": [[15, "cycquery-mimiciv-mimicivquerier"]], "cycquery.omop": [[16, "module-cycquery.omop"]], "cycquery.omop.OMOPQuerier": [[17, "cycquery-omop-omopquerier"]], "cycquery.ops": [[18, "module-cycquery.ops"]], "cycquery.ops.AddColumn": [[19, "cycquery-ops-addcolumn"]], "cycquery.ops.AddDeltaColumn": [[20, "cycquery-ops-adddeltacolumn"]], "cycquery.ops.AddDeltaConstant": [[21, "cycquery-ops-adddeltaconstant"]], "cycquery.ops.AddNumeric": [[22, "cycquery-ops-addnumeric"]], "cycquery.ops.And": [[23, "cycquery-ops-and"]], "cycquery.ops.Apply": [[24, "cycquery-ops-apply"]], "cycquery.ops.Cast": [[25, "cycquery-ops-cast"]], "cycquery.ops.ConditionAfterDate": [[26, "cycquery-ops-conditionafterdate"]], "cycquery.ops.ConditionBeforeDate": [[27, "cycquery-ops-conditionbeforedate"]], "cycquery.ops.ConditionEndsWith": [[28, "cycquery-ops-conditionendswith"]], "cycquery.ops.ConditionEquals": [[29, "cycquery-ops-conditionequals"]], "cycquery.ops.ConditionGreaterThan": [[30, "cycquery-ops-conditiongreaterthan"]], "cycquery.ops.ConditionIn": [[31, "cycquery-ops-conditionin"]], "cycquery.ops.ConditionInMonths": [[32, "cycquery-ops-conditioninmonths"]], "cycquery.ops.ConditionInYears": [[33, "cycquery-ops-conditioninyears"]], "cycquery.ops.ConditionLessThan": [[34, "cycquery-ops-conditionlessthan"]], "cycquery.ops.ConditionLike": [[35, "cycquery-ops-conditionlike"]], "cycquery.ops.ConditionRegexMatch": [[36, "cycquery-ops-conditionregexmatch"]], "cycquery.ops.ConditionStartsWith": [[37, "cycquery-ops-conditionstartswith"]], "cycquery.ops.ConditionSubstring": [[38, "cycquery-ops-conditionsubstring"]], "cycquery.ops.Count": [[39, "cycquery-ops-count"]], "cycquery.ops.Distinct": [[40, "cycquery-ops-distinct"]], "cycquery.ops.Drop": [[41, "cycquery-ops-drop"]], "cycquery.ops.DropEmpty": [[42, "cycquery-ops-dropempty"]], "cycquery.ops.DropNulls": [[43, "cycquery-ops-dropnulls"]], "cycquery.ops.ExtractTimestampComponent": [[44, "cycquery-ops-extracttimestampcomponent"]], "cycquery.ops.FillNull": [[45, "cycquery-ops-fillnull"]], "cycquery.ops.GroupByAggregate": [[46, "cycquery-ops-groupbyaggregate"]], "cycquery.ops.Join": [[47, "cycquery-ops-join"]], "cycquery.ops.Keep": [[48, "cycquery-ops-keep"]], "cycquery.ops.Limit": [[49, "cycquery-ops-limit"]], "cycquery.ops.Literal": [[50, "cycquery-ops-literal"]], "cycquery.ops.Or": [[51, "cycquery-ops-or"]], "cycquery.ops.OrderBy": [[52, "cycquery-ops-orderby"]], "cycquery.ops.QueryOp": [[53, "cycquery-ops-queryop"]], "cycquery.ops.RandomizeOrder": [[54, "cycquery-ops-randomizeorder"]], "cycquery.ops.Rename": [[55, "cycquery-ops-rename"]], "cycquery.ops.Reorder": [[56, "cycquery-ops-reorder"]], "cycquery.ops.ReorderAfter": [[57, "cycquery-ops-reorderafter"]], "cycquery.ops.Sequential": [[58, "cycquery-ops-sequential"]], "cycquery.ops.Substring": [[59, "cycquery-ops-substring"]], "cycquery.ops.Trim": [[60, "cycquery-ops-trim"]], "cycquery.ops.Union": [[61, "cycquery-ops-union"]], "cycquery": [[62, "module-cycquery"]], "dataset APIs": [[62, "dataset-apis"]], "Tutorials": [[63, "tutorials"]], "eICU-CRD tutorial": [[64, "eICU-CRD-tutorial"]], "Imports and instantiate EICUQuerier": [[64, "Imports-and-instantiate-EICUQuerier"]], "Example 1. Get all female patients discharged in 2014 (limit to 100 rows).": [[64, "Example-1.-Get-all-female-patients-discharged-in-2014-(limit-to-100-rows)."]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in diagnosisstring), discharged in the year 2015.": [[64, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-diagnosisstring),-discharged-in-the-year-2015."]], "Example 3. Get potassium lab tests for patients discharged in the year 2014, for all teaching hospitals.": [[64, "Example-3.-Get-potassium-lab-tests-for-patients-discharged-in-the-year-2014,-for-all-teaching-hospitals."]], "Example 4. Get glucose medications (substring search) for female patients discharged in 2014.": [[64, "Example-4.-Get-glucose-medications-(substring-search)-for-female-patients-discharged-in-2014."]], "GEMINI tutorial": [[65, "GEMINI-tutorial"]], "Imports and instantiate GEMINIQuerier.": [[65, "Imports-and-instantiate-GEMINIQuerier."]], "Example 1a. Create a table with only one hospitalization per patient, keeping the most recent encounter for each patient. Sort the dataset by patient_id_hashed and discharge_date_time, and then keep the recent record.": [[65, "Example-1a.-Create-a-table-with-only-one-hospitalization-per-patient,-keeping-the-most-recent-encounter-for-each-patient.-Sort-the-dataset-by-patient_id_hashed-and-discharge_date_time,-and-then-keep-the-recent-record."]], "Example 1b. From the above set of encounters, take a subset of patients who were discharged between April 1, 2015 and March 31, 2016.": [[65, "Example-1b.-From-the-above-set-of-encounters,-take-a-subset-of-patients-who-were-discharged-between-April-1,-2015-and-March-31,-2016."]], "Example 1c. From the above set of encounters, get the total number of admissions for each hospital.": [[65, "Example-1c.-From-the-above-set-of-encounters,-get-the-total-number-of-admissions-for-each-hospital."]], "Example 2a. How many sodium tests were placed between Apr 1, 2015 and May 31, 2015 at hospital 101?": [[65, "Example-2a.-How-many-sodium-tests-were-placed-between-Apr-1,-2015-and-May-31,-2015-at-hospital-101?"]], "MIMIC-III tutorial": [[66, "MIMIC-III-tutorial"]], "Imports and instantiate MIMICIIIQuerier": [[66, "Imports-and-instantiate-MIMICIIIQuerier"]], "Example 1. Get all male patients with a mortality outcome.": [[66, "Example-1.-Get-all-male-patients-with-a-mortality-outcome."]], "Example 2. Get all female patient encounters with diagnoses (gastroenteritis in ICD-9 long title).": [[66, "Example-2.-Get-all-female-patient-encounters-with-diagnoses-(gastroenteritis-in-ICD-9-long-title)."]], "Example 3. Get potassium lab tests for female patients.": [[66, "Example-3.-Get-potassium-lab-tests-for-female-patients."]], "Example 4. Get AaDO2 carevue chart events for male patients that have a valuenum of less than 20.": [[66, "Example-4.-Get-AaDO2-carevue-chart-events-for-male-patients-that-have-a-valuenum-of-less-than-20."]], "MIMIC-IV tutorial": [[67, "MIMIC-IV-tutorial"]], "Imports and instantiate MIMICIVQuerier": [[67, "Imports-and-instantiate-MIMICIVQuerier"]], "Example 1. Get all patient admissions from 2021 or later (approx year of admission)": [[67, "Example-1.-Get-all-patient-admissions-from-2021-or-later-(approx-year-of-admission)"]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in ICD-10 long title), in the year 2015.": [[67, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-ICD-10-long-title),-in-the-year-2015."]], "Example 3. Advanced - uses ConditionRegexMatch from cyclops.query.ops. Get all patient encounters with diagnoses (ICD-9 long title contains schizophrenia and chronic ), in the year 2015.": [[67, "Example-3.-Advanced---uses-ConditionRegexMatch-from-cyclops.query.ops.-Get-all-patient-encounters-with-diagnoses-(ICD-9-long-title-contains-schizophrenia-and-chronic-),-in-the-year-2015."]], "Example 4. Get routine vital signs for patients from year 2015.": [[67, "Example-4.-Get-routine-vital-signs-for-patients-from-year-2015."]], "Example 5. Get hemoglobin lab tests for patients from year 2009.": [[67, "Example-5.-Get-hemoglobin-lab-tests-for-patients-from-year-2009."]], "Example 6. Get radiology reports and filter on keywords lymphadenopathy and infectious occurring together from year 2009.": [[67, "Example-6.-Get-radiology-reports-and-filter-on-keywords-lymphadenopathy-and-infectious-occurring-together-from-year-2009."]], "Example 7. Get all female patient encounters from year 2015, and return batches partitioned and indexed on subject_id.": [[67, "Example-7.-Get-all-female-patient-encounters-from-year-2015,-and-return-batches-partitioned-and-indexed-on-subject_id."]], "Example 8. Running a raw SQL string.": [[67, "Example-8.-Running-a-raw-SQL-string."]], "OMOP tutorial": [[68, "OMOP-tutorial"]], "Imports and instantiate OMOPQuerier.": [[68, "Imports-and-instantiate-OMOPQuerier."], [68, "id1"]], "Example 1. Get all patient visits in or after 2010.": [[68, "Example-1.-Get-all-patient-visits-in-or-after-2010."]], "Example 2. Get measurements for all visits in or after 2020.": [[68, "Example-2.-Get-measurements-for-all-visits-in-or-after-2020."]], "Example 1. Get all patient visits that ended in a mortality outcome in or after 2010.": [[68, "Example-1.-Get-all-patient-visits-that-ended-in-a-mortality-outcome-in-or-after-2010."]], "Example 2. Get all measurements for female patient visits with sepsis diagnoses, that ended in a mortality outcome.": [[68, "Example-2.-Get-all-measurements-for-female-patient-visits-with-sepsis-diagnoses,-that-ended-in-a-mortality-outcome."]]}, "indexentries": {"cycquery.base": [[4, "module-cycquery.base"]], "module": [[4, "module-cycquery.base"], [6, "module-cycquery.eicu"], [8, "module-cycquery.gemini"], [10, "module-cycquery.interface"], [12, "module-cycquery.mimiciii"], [14, "module-cycquery.mimiciv"], [16, "module-cycquery.omop"], [18, "module-cycquery.ops"], [62, "module-cycquery"]], "datasetquerier (class in cycquery.base)": [[5, "cycquery.base.DatasetQuerier"]], "db (datasetquerier attribute)": [[5, "cycquery.base.DatasetQuerier.db"]], "get_table() (datasetquerier method)": [[5, "cycquery.base.DatasetQuerier.get_table"]], "list_columns() (datasetquerier method)": [[5, "cycquery.base.DatasetQuerier.list_columns"]], "list_custom_tables() (datasetquerier method)": [[5, "cycquery.base.DatasetQuerier.list_custom_tables"]], "list_schemas() (datasetquerier method)": [[5, "cycquery.base.DatasetQuerier.list_schemas"]], "list_tables() (datasetquerier method)": [[5, "cycquery.base.DatasetQuerier.list_tables"]], "cycquery.eicu": [[6, "module-cycquery.eicu"]], "eicuquerier (class in cycquery.eicu)": [[7, "cycquery.eicu.EICUQuerier"]], "get_table() (eicuquerier method)": [[7, "cycquery.eicu.EICUQuerier.get_table"]], "list_columns() (eicuquerier method)": [[7, "cycquery.eicu.EICUQuerier.list_columns"]], "list_custom_tables() (eicuquerier method)": [[7, "cycquery.eicu.EICUQuerier.list_custom_tables"]], "list_schemas() (eicuquerier method)": [[7, "cycquery.eicu.EICUQuerier.list_schemas"]], "list_tables() (eicuquerier method)": [[7, "cycquery.eicu.EICUQuerier.list_tables"]], "cycquery.gemini": [[8, "module-cycquery.gemini"]], "geminiquerier (class in cycquery.gemini)": [[9, "cycquery.gemini.GEMINIQuerier"]], "care_units() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.care_units"]], "diagnoses() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.diagnoses"]], "get_table() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.get_table"]], "imaging() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.imaging"]], "ip_admin() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.ip_admin"]], "list_columns() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.list_columns"]], "list_custom_tables() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.list_custom_tables"]], "list_schemas() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.list_schemas"]], "list_tables() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.list_tables"]], "room_transfer() (geminiquerier method)": [[9, "cycquery.gemini.GEMINIQuerier.room_transfer"]], "cycquery.interface": [[10, "module-cycquery.interface"]], "queryinterface (class in cycquery.interface)": [[11, "cycquery.interface.QueryInterface"]], "__init__() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.__init__"]], "clear_data() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.clear_data"]], "data (queryinterface property)": [[11, "cycquery.interface.QueryInterface.data"]], "join() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.join"]], "ops() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.ops"]], "run() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.run"]], "save() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.save"]], "union() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.union"]], "union_all() (queryinterface method)": [[11, "cycquery.interface.QueryInterface.union_all"]], "cycquery.mimiciii": [[12, "module-cycquery.mimiciii"]], "mimiciiiquerier (class in cycquery.mimiciii)": [[13, "cycquery.mimiciii.MIMICIIIQuerier"]], "chartevents() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.chartevents"]], "diagnoses() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.diagnoses"]], "get_table() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.get_table"]], "labevents() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.labevents"]], "list_columns() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.list_columns"]], "list_custom_tables() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.list_custom_tables"]], "list_schemas() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.list_schemas"]], "list_tables() (mimiciiiquerier method)": [[13, "cycquery.mimiciii.MIMICIIIQuerier.list_tables"]], "cycquery.mimiciv": [[14, "module-cycquery.mimiciv"]], "mimicivquerier (class in cycquery.mimiciv)": [[15, "cycquery.mimiciv.MIMICIVQuerier"]], "chartevents() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.chartevents"]], "diagnoses_icd() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.diagnoses_icd"]], "get_table() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.get_table"]], "labevents() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.labevents"]], "list_columns() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.list_columns"]], "list_custom_tables() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.list_custom_tables"]], "list_schemas() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.list_schemas"]], "list_tables() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.list_tables"]], "patients() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.patients"]], "procedures_icd() (mimicivquerier method)": [[15, "cycquery.mimiciv.MIMICIVQuerier.procedures_icd"]], "cycquery.omop": [[16, "module-cycquery.omop"]], "omopquerier (class in cycquery.omop)": [[17, "cycquery.omop.OMOPQuerier"]], "get_table() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.get_table"]], "list_columns() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.list_columns"]], "list_custom_tables() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.list_custom_tables"]], "list_schemas() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.list_schemas"]], "list_tables() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.list_tables"]], "map_concept_ids_to_name() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.map_concept_ids_to_name"]], "measurement() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.measurement"]], "observation() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.observation"]], "person() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.person"]], "visit_detail() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.visit_detail"]], "visit_occurrence() (omopquerier method)": [[17, "cycquery.omop.OMOPQuerier.visit_occurrence"]], "cycquery.ops": [[18, "module-cycquery.ops"]], "addcolumn (class in cycquery.ops)": [[19, "cycquery.ops.AddColumn"]], "__call__() (addcolumn method)": [[19, "cycquery.ops.AddColumn.__call__"]], "adddeltacolumn (class in cycquery.ops)": [[20, "cycquery.ops.AddDeltaColumn"]], "__call__() (adddeltacolumn method)": [[20, "cycquery.ops.AddDeltaColumn.__call__"]], "adddeltaconstant (class in cycquery.ops)": [[21, "cycquery.ops.AddDeltaConstant"]], "__call__() (adddeltaconstant method)": [[21, "cycquery.ops.AddDeltaConstant.__call__"]], "addnumeric (class in cycquery.ops)": [[22, "cycquery.ops.AddNumeric"]], "__call__() (addnumeric method)": [[22, "cycquery.ops.AddNumeric.__call__"]], "and (class in cycquery.ops)": [[23, "cycquery.ops.And"]], "__call__() (and method)": [[23, "cycquery.ops.And.__call__"]], "apply (class in cycquery.ops)": [[24, "cycquery.ops.Apply"]], "__call__() (apply method)": [[24, "cycquery.ops.Apply.__call__"]], "cast (class in cycquery.ops)": [[25, "cycquery.ops.Cast"]], "__call__() (cast method)": [[25, "cycquery.ops.Cast.__call__"]], "conditionafterdate (class in cycquery.ops)": [[26, "cycquery.ops.ConditionAfterDate"]], "__call__() (conditionafterdate method)": [[26, "cycquery.ops.ConditionAfterDate.__call__"]], "conditionbeforedate (class in cycquery.ops)": [[27, "cycquery.ops.ConditionBeforeDate"]], "__call__() (conditionbeforedate method)": [[27, "cycquery.ops.ConditionBeforeDate.__call__"]], "conditionendswith (class in cycquery.ops)": [[28, "cycquery.ops.ConditionEndsWith"]], "__call__() (conditionendswith method)": [[28, "cycquery.ops.ConditionEndsWith.__call__"]], "conditionequals (class in cycquery.ops)": [[29, "cycquery.ops.ConditionEquals"]], "__call__() (conditionequals method)": [[29, "cycquery.ops.ConditionEquals.__call__"]], "conditiongreaterthan (class in cycquery.ops)": [[30, "cycquery.ops.ConditionGreaterThan"]], "__call__() (conditiongreaterthan method)": [[30, "cycquery.ops.ConditionGreaterThan.__call__"]], "conditionin (class in cycquery.ops)": [[31, "cycquery.ops.ConditionIn"]], "__call__() (conditionin method)": [[31, "cycquery.ops.ConditionIn.__call__"]], "conditioninmonths (class in cycquery.ops)": [[32, "cycquery.ops.ConditionInMonths"]], "__call__() (conditioninmonths method)": [[32, "cycquery.ops.ConditionInMonths.__call__"]], "conditioninyears (class in cycquery.ops)": [[33, "cycquery.ops.ConditionInYears"]], "__call__() (conditioninyears method)": [[33, "cycquery.ops.ConditionInYears.__call__"]], "conditionlessthan (class in cycquery.ops)": [[34, "cycquery.ops.ConditionLessThan"]], "__call__() (conditionlessthan method)": [[34, "cycquery.ops.ConditionLessThan.__call__"]], "conditionlike (class in cycquery.ops)": [[35, "cycquery.ops.ConditionLike"]], "__call__() (conditionlike method)": [[35, "cycquery.ops.ConditionLike.__call__"]], "conditionregexmatch (class in cycquery.ops)": [[36, "cycquery.ops.ConditionRegexMatch"]], "__call__() (conditionregexmatch method)": [[36, "cycquery.ops.ConditionRegexMatch.__call__"]], "conditionstartswith (class in cycquery.ops)": [[37, "cycquery.ops.ConditionStartsWith"]], "__call__() (conditionstartswith method)": [[37, "cycquery.ops.ConditionStartsWith.__call__"]], "conditionsubstring (class in cycquery.ops)": [[38, "cycquery.ops.ConditionSubstring"]], "__call__() (conditionsubstring method)": [[38, "cycquery.ops.ConditionSubstring.__call__"]], "count (class in cycquery.ops)": [[39, "cycquery.ops.Count"]], "__call__() (count method)": [[39, "cycquery.ops.Count.__call__"]], "distinct (class in cycquery.ops)": [[40, "cycquery.ops.Distinct"]], "__call__() (distinct method)": [[40, "cycquery.ops.Distinct.__call__"]], "drop (class in cycquery.ops)": [[41, "cycquery.ops.Drop"]], "__call__() (drop method)": [[41, "cycquery.ops.Drop.__call__"]], "dropempty (class in cycquery.ops)": [[42, "cycquery.ops.DropEmpty"]], "__call__() (dropempty method)": [[42, "cycquery.ops.DropEmpty.__call__"]], "dropnulls (class in cycquery.ops)": [[43, "cycquery.ops.DropNulls"]], "__call__() (dropnulls method)": [[43, "cycquery.ops.DropNulls.__call__"]], "extracttimestampcomponent (class in cycquery.ops)": [[44, "cycquery.ops.ExtractTimestampComponent"]], "__call__() (extracttimestampcomponent method)": [[44, "cycquery.ops.ExtractTimestampComponent.__call__"]], "fillnull (class in cycquery.ops)": [[45, "cycquery.ops.FillNull"]], "__call__() (fillnull method)": [[45, "cycquery.ops.FillNull.__call__"]], "groupbyaggregate (class in cycquery.ops)": [[46, "cycquery.ops.GroupByAggregate"]], "__call__() (groupbyaggregate method)": [[46, "cycquery.ops.GroupByAggregate.__call__"]], "join (class in cycquery.ops)": [[47, "cycquery.ops.Join"]], "__call__() (join method)": [[47, "cycquery.ops.Join.__call__"]], "keep (class in cycquery.ops)": [[48, "cycquery.ops.Keep"]], "__call__() (keep method)": [[48, "cycquery.ops.Keep.__call__"]], "limit (class in cycquery.ops)": [[49, "cycquery.ops.Limit"]], "__call__() (limit method)": [[49, "cycquery.ops.Limit.__call__"]], "literal (class in cycquery.ops)": [[50, "cycquery.ops.Literal"]], "__call__() (literal method)": [[50, "cycquery.ops.Literal.__call__"]], "or (class in cycquery.ops)": [[51, "cycquery.ops.Or"]], "__call__() (or method)": [[51, "cycquery.ops.Or.__call__"]], "orderby (class in cycquery.ops)": [[52, "cycquery.ops.OrderBy"]], "__call__() (orderby method)": [[52, "cycquery.ops.OrderBy.__call__"]], "queryop (class in cycquery.ops)": [[53, "cycquery.ops.QueryOp"]], "__call__() (queryop method)": [[53, "cycquery.ops.QueryOp.__call__"]], "randomizeorder (class in cycquery.ops)": [[54, "cycquery.ops.RandomizeOrder"]], "__call__() (randomizeorder method)": [[54, "cycquery.ops.RandomizeOrder.__call__"]], "rename (class in cycquery.ops)": [[55, "cycquery.ops.Rename"]], "__call__() (rename method)": [[55, "cycquery.ops.Rename.__call__"]], "reorder (class in cycquery.ops)": [[56, "cycquery.ops.Reorder"]], "__call__() (reorder method)": [[56, "cycquery.ops.Reorder.__call__"]], "reorderafter (class in cycquery.ops)": [[57, "cycquery.ops.ReorderAfter"]], "__call__() (reorderafter method)": [[57, "cycquery.ops.ReorderAfter.__call__"]], "sequential (class in cycquery.ops)": [[58, "cycquery.ops.Sequential"]], "__add__() (sequential method)": [[58, "cycquery.ops.Sequential.__add__"]], "__call__() (sequential method)": [[58, "cycquery.ops.Sequential.__call__"]], "__init__() (sequential method)": [[58, "cycquery.ops.Sequential.__init__"]], "append() (sequential method)": [[58, "cycquery.ops.Sequential.append"]], "extend() (sequential method)": [[58, "cycquery.ops.Sequential.extend"]], "insert() (sequential method)": [[58, "cycquery.ops.Sequential.insert"]], "pop() (sequential method)": [[58, "cycquery.ops.Sequential.pop"]], "substring (class in cycquery.ops)": [[59, "cycquery.ops.Substring"]], "__call__() (substring method)": [[59, "cycquery.ops.Substring.__call__"]], "trim (class in cycquery.ops)": [[60, "cycquery.ops.Trim"]], "__call__() (trim method)": [[60, "cycquery.ops.Trim.__call__"]], "union (class in cycquery.ops)": [[61, "cycquery.ops.Union"]], "__call__() (union method)": [[61, "cycquery.ops.Union.__call__"]], "cycquery": [[62, "module-cycquery"]]}})